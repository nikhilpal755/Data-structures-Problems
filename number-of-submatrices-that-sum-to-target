https://leetcode.com/problems/number-of-submatrices-that-sum-to-target/



Vedio : https://www.youtube.com/watch?v=x21lPXfkJqw
Editorial : https://leetcode.com/problems/number-of-submatrices-that-sum-to-target/discuss/1162748/C%2B%2B-Easy-Solution-with-Explanation


class Solution {
public:
    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {
 
        int n = matrix.size();
        int m = matrix[0].size();
        
        // find the prefix sum of rows
    
    
        for(int i=0; i<n; i++){
            for(int j=1; j<m; j++){
                matrix[i][j] += matrix[i][j  - 1];
            }
        }
        
        // fixing two bars(cols) and then calculating number of submatrices between them by using the concept
        // of subarrays with sum=k
        
        unordered_map<int,int> mp;
        int ans = 0, sum;
        for(int start=0; start<m; start++){
            for(int end=start; end<m ;end++){
                mp.clear();
                sum = 0;// running prefix sum between start and end 
                mp[0] = 1;
                
                for(int row=0; row<n; row++){
                    sum += matrix[row][end] - (start > 0 ? matrix[row][start - 1] : 0);
                    if(mp.find(sum - target) != mp.end())ans += mp[sum - target];
                    
                    mp[sum]++;
                }
            }
        }
        
        return ans;
    }
};

