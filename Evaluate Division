Refrence : https://leetcode.com/problems/evaluate-division/





Firstly we construct a graph such that an equation a / b = x contributes two edges: a->b and b->a, corresponding to values x and 1/x, respectively.

After constructing this graph, for each query q, we invoke a depth first search function where the node is q[0] and the target node is q[1]. 
If a path is found from q[0] to q[1], we multiply values along the path, and get the result.
If no path is found, or either node does not exist in the graph, we return -1.0.

---------------------------------DFS------------------------------------------

class Solution {
public:
    bool DFS(string start, string target , unordered_set<string>&vis , unordered_map<string , vector<pair<string , double>>>& adj , double&val){
        
        if(!adj.count(start) or !adj.count(target)){
            return false; // if string is not present in our adj list 
        }
        else if(start == target){
            return true; // val is the result
        }
     
            vis.insert(start); 
        for(auto &X : adj[start]){
            if(!vis.count(X.first)){ // X = {string , val}
                double org = val;
                val *= X.second; 
                if(DFS(X.first, target , vis, adj , val))return true;
                val = org;
            }
        }
        return false;
            
 

         
    }
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        
        unordered_map<string,vector<pair<string,double>>>adj; // [a,b] value=x     a -> {b, x}
        
        for(int i=0 ;i<equations.size() ;i++){
            vector<string> v = equations[i];
            adj[v[0]].push_back({v[1] , values[i]});
            adj[v[1]].push_back({v[0] , 1.0/values[i]});
            
        }
        
        
        // DFS on queries
        vector<double> ans;
        for(auto X : queries){
            unordered_set<string> vis; // why not bool vector ---> because we have to check for strings
            
            double val = 1.0;
            if(DFS(X[0] , X[1] , vis , adj , val )) ans.push_back(val);
            else{
                ans.push_back(-1.0);
            }
        }
        
        return ans;
        
        
        
        
    }
};
