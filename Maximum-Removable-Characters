Link : https://leetcode.com/problems/maximum-number-of-removable-characters/

--------------------------------- Binary Search ---------------------------------------
class Solution {
public:
    bool Issubsequence(string &str, string &p ){
        // checking if  p is subsequence of str
        int j = 0;
            for(int i=0 ;i<str.size() ;i++){
                if(j < p.size() and str[i] == p[j] )j++;
                
            }
        
        return (j == p.size());
        
    }

    int maximumRemovals(string s, string p, vector<int>& removable) {
    
        
        int n = removable.size();
        int l=0 , r = n-1;
    
        int ans = 0;
        while(l <= r){
            int mid = l + (r - l)/2;
    
            string str = s;
            
            // marking removable with "/"
            for(int i=0 ; i<=mid ;i++){
                str[removable[i]] = '/'; 
            }
            
            if(Issubsequence(str, p)){
                // found subsequence 
                //if p is subsequence of string after mid number of removals then we should look for if it's possible to remove more characters 
                // move to the right for more length
                
                ans = mid + 1; 
                l = mid + 1;
            }            
            else{
             //if p is not a subsequence of string it means that we have certainly removed more characters from string 
                r = mid - 1;
            }
            
            
        }
        
        return ans;
       
        
    }
};
