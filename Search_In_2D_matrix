QUESION -  https://leetcode.com/problems/search-a-2d-matrix-ii/discuss/66142/C%2B%2B-with-O(m%2Bn)-complexity



// ------------- APPROACH ------------------------

1) Brutforce - 
   Just compare all elements with 2 for loops -->> Takes O(M*N) , where M = no of rows and N = no of cols
2) Using Recursion -
   Moving right and down and comparing values   
   This also takes O(M*N)

    ////////// --------------- TLE --------------------------------------
    class Solution {
    public:
    bool vis[301][301] = {false};
    bool helper(vector<vector<int>>& matrix , int target , int rows , int cols , int i , int j){
        if(i == rows or j == cols or matrix[i][j] > target)return false;
        
        if(matrix[i][j] == target or vis[i][j] == true)return true;

        
        
        bool y = helper(matrix , target, rows ,cols , i , j+1);
        bool x = helper(matrix, target ,rows, cols , i+1 , j );
        
        vis[i][j] = x | y;
            
        return x | y;
            
        }
        bool searchMatrix(vector<vector<int>>& matrix, int target) {
            int rows = matrix.size();
            int cols = matrix[0].size();
            
        return helper(matrix, target , rows, cols , 0 , 0);
            
            
        }
    }; 

// OPTIMISED APPROACH 
// Just like Binary Search -- 
// In Binary search , we reduce search space by half . Similarly, In this we reduce the search space by eliminating one row or one col each time.


Search from the top-right element and reduce the search space by one row or column at each time.

[[ 1,  4,  7, 11, 15],
 [ 2,  5,  8, 12, 19], 
 [ 3,  6,  9, 16, 22],
 [10, 13, 14, 17, 24],
 [18, 21, 23, 26, 30]]


> Start iterating the matrix from top right corner of the matrix, that is matrix[0][size of column -1].

> If matrix[i][j]==target, return true.

> If the target is less than matrix[i][j], then move leftwards (decrease the column), that is --j.

> If the target is greater than matrix[i][j], then move downwards (increase the row), that is ++i.

> If the target element is not found then after exiting the above loop, return false.


Suppose we want to search for 12 in the above matrix. compare 12 with the top-right element nums[0][4] = 15. Since 12 < 15, 12 cannot appear in the column of 15 since
all elements in that column are greater than or equal to 15. Now we reduce the search space by one column (the last column).

We further compare 12 with the top-right element of the remaining matrix, which is nums[0][3] = 11. Since 12 > 11, 12 cannot appear in the row of 11 since all elements
in this row are less than or equal to 11 (the last column has been discarded). Now we reduce the search space by one row (the first row).

We move on to compare 12 with the top-right element of the remaining matrix, which is nums[1][3] = 12. Since it is equal to 12, we return true.

// we can search from the top-right , bottom-left , bottom-right 

Time complexity : 

worst case -- when we  need to find the element present at bottom-left and we are starting at top-right 
Worst Case time complexity : O(M + N) 


class Solution {
public:
  
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size();
        int n= matrix[0].size();

        // we go the top right corner then compare the value with target and decrease the space by either row or col each time

        int col = n-1;
        int row = 0;
        while(row < m and col >= 0){

            if(matrix[row][col] > target ){
                col--;// eliminated  col
            }else if(matrix[row][col] < target){
                row++;// eliminated  row
            }else return true; 
            
        }

        return false;
    }
};
