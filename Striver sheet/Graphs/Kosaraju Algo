------------------------- -------------------------------

Refrence : https://www.geeksforgeeks.org/strongly-connected-components/
vedio : https://www.youtube.com/watch?v=gIgb7pCZK28


class Solution
{
	public:
	//Function to find number of strongly connected components in the graph.
	void DFS(int node, vector<int> adj[], vector<bool>& vis, stack<int>& s){
	    vis[node] = true;
	    for(auto X : adj[node]){
	        if(!vis[X]){
	            DFS(X  ,adj, vis , s);
	        }
	    }
	    s.push(node);
	    return;
	}
	
	void reverseGraphDFS(int node ,vector<int> reverseadj[] , vector<bool>& vis){
	    vis[node] = true;
	    for(auto X : reverseadj[node]){
	        if(!vis[X]){
	            reverseGraphDFS(X , reverseadj, vis);
	        }
	    }
	    return;
	    
	}
    int kosaraju(int V, vector<int> adj[])
    {
       ]
        vector<bool> vis(V , false);
        stack<int> s;
        
        // filling the stack
        for(int i=0 ;i< V ; i++){
            if(!vis[i]){
                DFS(i , adj, vis, s);
            }
        }
        
        // now stack is ready
        // we will first reverse the graph
        vector<int> reverseadj[V];
        
        for(int i=0 ;i< V ;i++){
            vis[i] = false;
            for(auto X : adj[i]){
                reverseadj[X].push_back(i);
            }
        }
        
        // now we need to again use dfs to find SCC
        int scc = 0;
        while(!s.empty()){
            auto node = s.top();
            s.pop();
            if(!vis[node]){
              reverseGraphDFS(node, reverseadj, vis);
                scc++;   
            }
        }
        return scc;
    }
};
