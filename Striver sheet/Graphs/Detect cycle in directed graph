---------------------------- DFS ---------------------------

-> create a rec_stack boolean array 
-> mark true for each node while going down in dfs
-> If we reach any node which we have rec_stack[node] = true which means node is currently present in recursion stack => cycle exists

https://www.geeksforgeeks.org/detect-cycle-in-a-graph/
-----------------------------------------------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;

class Solution
{
    public:
	//Function to detect cycle in a directed graph.
	bool DFS(int node , vector<int> adj[] , vector<bool>&vis , vector<bool>&rec_stack){
	   
    	    vis[node]= true;
    	    rec_stack[node]= true;
    	    for(auto X : adj[node]){
    	        if(!vis[X]){
    	            if(DFS(X , adj , vis , rec_stack))return true;
    	        }else{
    	            if(rec_stack[X] == true)return true;
    	        }
    	    }
	   
	    rec_stack[node] = false;
	    return false;
	    
	}
	bool isCyclic(int V, vector<int> adj[]) 
	{
	   	// code here
	   	vector<bool> vis(V , false) , rec_stack(V , false);
	   	
	   	for(int i=0 ;i<V ;i++){
	   	    if(!vis[i]){
	   	        if(DFS(i , adj , vis , rec_stack))return true;// cycle detected
	   	    }
	   	}
	   	
	   	return false;
	   	
	}
};



int main()
{
    
    int t;
    cin >> t;
    while(t--)
    {
    	int V, E;
    	cin >> V >> E;

    	vector<int> adj[V];

    	for(int i = 0; i < E; i++)
    	{
    		int u, v;
    		cin >> u >> v;
    		adj[u].push_back(v);
    	}

    	Solution obj;
    	cout << obj.isCyclic(V, adj) << "\n";
    }

    return 0;
}

---------------------------------------------------------------------


---------------------------BFS--------------------------------
> Using Toposort property : Toposort is only Applicable on Directed acyclic graph(DAG) 
> we will try to find toposort of the graph , if toposort is possible => cycle doesn't exist , else cycle exists

class Solution
{
    public:
	//Function to detect cycle in a directed graph.

	bool isCyclic(int V, vector<int> adj[]) 
	{
	   	// find toposort of the graph 
	   	// if toposort is not possible then there is cycle in a graph
	   	
	   	// counting in-degree of each node
	   	vector<int> indegree(V , 0);
	   	for(int i=0 ;i<V; i++){
	   	    for(auto X : adj[i]){
	   	        indegree[X]++;
	   	    }
	   	}
	   	
	   	// we have to push the elements having 0 indegree in our queue
	   	queue<int> q;
	   	for(int i=0 ;i<V ;i++){
	   	    if(indegree[i] == 0)q.push(i);
	   	}
	   	vector<int> topo;
	   	while(!q.empty()){
	   	    int node = q.front();
	   	    q.pop();
	   	    topo.push_back(node);
	   	    
	   	    // now we have to relax the adjacent edge's of current node by decreasing the
	   	    // indegree of adjacent nodes by 1
	   	    for(auto X : adj[node]){
	   	        indegree[X]--;
	   	        if(indegree[X] == 0)q.push(X);
	   	    }
	   	}
	   	if(topo.size() == V)return false; // no cycle as toposort is found
	   	return true;
	   	
	}
};


