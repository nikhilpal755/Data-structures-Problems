https://leetcode.com/problems/shortest-bridge/

Vedio : https://www.youtube.com/watch?v=gkINMhbbIbU


My code: 
class Solution {
public:
    vector<vector<bool>> vis;
    vector<int> dx = {-1,0,1,0};
    vector<int> dy = {0,-1,0,1};
    void DFS(vector<vector<int>>& grid, int i ,int j, int n){
        if( i< 0 or j < 0 or i >= n or j >= n or vis[i][j] or grid[i][j] == 0)return;
        vis[i][j] = true;
        
        for(int k=0; k<4; k++){
           int new_row = i + dx[k];
           int new_col = j + dy[k];
           DFS(grid, new_row, new_col, n);
        }
        
    }
    int shortestBridge(vector<vector<int>>& grid) {
        
        int n = grid.size();
        vis.resize(n, vector<bool>(n, false));
        
        // First do DFS to find the first island and then BFS to expand and calculate the result
        
        int flag = 0;
        for(int i=0;i<n; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 1 and !vis[i][j]){
                    DFS(grid, i, j, n);
                    flag = 1;
                    break;
                }
            }
            if(flag)break;
        }
        
        int dist = 0;
        queue<pair<int,int>> q;
        for(int i=0;i<n; i++){
            for(int j=0; j<n; j++){
                if(vis[i][j])q.push({i, j});
            }
        }
        
        while(!q.empty()){
            int sz = q.size();
            for(int i=0;i<sz; i++){
                auto ele = q.front();
                q.pop();
                
                int x = ele.first;
                int y = ele.second;
                
                
                for(int j=0;j<4; j++){
                    int new_row = x + dx[j];
                    int new_col = y + dy[j];
                    
                    if(new_row <0 or new_col < 0 or new_row >= n or new_col >= n or vis[new_row][new_col]){
                        continue;
                    }
                    if(grid[new_row][new_col] == 1)return dist;
                    vis[new_row][new_col] = true;
                    q.push({new_row, new_col});
                }
            }
            dist++;
        }
        
        return dist;
    }
};
