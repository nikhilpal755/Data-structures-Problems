Refrence : https://www.geeksforgeeks.org/bellman-ford-algorithm-dp-23/
Vedio : https://youtu.be/FtN3BYH2Zes
        https://www.youtube.com/watch?v=75yC1vbS8S8&t=1275s

--------------------------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;

class Solution{
    
	public:
	/*  Function to implement Dijkstra
    *   adj: vector of vectors which represents the graph
    *   S: source vertex to start traversing graph with
    *   V: number of vertices
    */
    vector <int> bellman_ford(int V, vector<vector<int>> adj, int S) {
  
        vector<int> dist(V, 100000000);
        
        dist[S] = 0;
        
        // n-1 times relaxing all edges
        for(int i=0 ;i<V-1; i++){
            for(auto X : adj){
                int u = X[0];
                int v = X[1];
                int wt = X[2];
                
                if(dist[u] + wt < dist[v]){
                    dist[v] = dist[u] + wt;
                }
            }
        }
        
        return dist;
        
        
        
    }
};



int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj;
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1;
            t1.push_back(u);
            t1.push_back(v);
            t1.push_back(w);
            adj.push_back(t1);
        }
        int S;
        cin>>S;
        
        Solution obj;
    	vector<int> res = obj.bellman_ford(V, adj, S);
    	
    	for(int i=0; i<V; i++)
    	    cout<<res[i]<<" ";
    	cout<<endl;
    }

    return 0;
}
