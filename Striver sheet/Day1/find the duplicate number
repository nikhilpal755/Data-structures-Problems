Refrence : https://leetcode.com/problems/find-the-duplicate-number/

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        // indexing method / pigeonhole principle
        
         for(int i=0 ;i<nums.size() ;i++){
             if(nums[abs(nums[i]) - 1] < 0)return abs( nums[i] );
             else nums[abs(nums[i]) - 1] = -1*nums[abs(nums[i]) - 1];
         }
         return -1;
        
        // sorting
        
         sort(nums.begin() , nums.end());
         for(int i=0 ;i<nums.size() -1 ;i++){
             if(nums[i] == nums[i+1])return nums[i];
         }
         return -1;
        
        // hash set
        
         set<int> st;
         for(int i=0 ;i<nums.size() ;i++){
             if(st.count(nums[i]))return nums[i];
             st.insert(nums[i]);
         }
         return -1;
        
        //binary search
        
         int l = 1, r= nums.size() ;
         int dup = -1;
         while(l <= r){
             int mid = l + (r -l)/2 ;
             int cnt = 0;
             for(auto X : nums){
                if(X <= mid)cnt++;
             }
             if(cnt > mid ){dup = mid ; r = mid - 1;}
             else l = mid + 1;
         }
         return dup;
        
        
        // floyd cycle
        
        int fp = nums[0], sp = nums[0];
        do{
            fp = nums[nums[fp]];
            sp = nums[sp];
        }while(fp != sp);
        
        // fp and sp are pointing of intersection point which is duplicate number
        // now just find the entry point
            
        sp = nums[0];
        while(sp != fp){
            fp = nums[fp];
            sp = nums[sp];
        }
        return fp;
    }
};
