Refrence : https://www.geeksforgeeks.org/count-number-subarrays-given-xor/


Solution : https://ide.geeksforgeeks.org/k7qB0lvaT8 


#include <bits/stdc++.h>
using namespace std;

int subarrayXor(int arr[] , int n , int m){
    // count subarrays whose xor = m
    // xor property => if a^b = c and we know values of c and a then b = a ^ c 
    // why ?   a^b = c  --> a^a^b = a^c --> b = a^c
    
    // here ,  c = m (-> targetXor (whole subarray xor)) ,
    // a = prefixXor of subarray(calculate while traversing)
    // we will use hashmap to check how many times b= a^c occur before...
    
    unordered_map<int,int> mp;
    int prefixXor = 0;
    int ans = 0;
    
    for(int i=0 ;i<n; i++){
        prefixXor ^= arr[i];
        ans += mp[m^prefixXor];
        if(prefixXor == m)ans++;
        mp[prefixXor]++;
    }
    return ans;
    
    
    
}
int main() {
	
    int arr[] = {5, 6, 7, 8, 9};
    int n = sizeof(arr) / sizeof(arr[0]);
    int m = 6;
 
    cout << "Number of subarrays having given XOR is "
         << subarrayXor(arr, n, m);
    return 0;

}


