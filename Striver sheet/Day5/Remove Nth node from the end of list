Refrence : https://leetcode.com/problems/remove-nth-node-from-end-of-list/

Solution : https://leetcode.com/problems/remove-nth-node-from-end-of-list/discuss/1164537/Short-and-Simple-One-Pass-Solution-w-Explanation-or-Beats-100-or-No-dummy-node-required!
-------- methods-----------
1)  just caluclate the length of list first and find length - n + 1 element from front and delete it
2)  Reverse List then delete Nth node and then again reverse it
3)  we can use two pointers here...
    > initilize *fp and *sp with head of linked list
    > move fp n nodes furthur (fp = fp -> next )
    > now start sp until fp -> next becomes null ( in total we are moving sp to (length of list - n) times)
    > now sp -> next is pointing to the node which we want to delete ( nth node from back)
    > delete it
   
   Main idea : maintain  n nodes distance between fp and sp and when fp reaches end of list , our sp will reach nth node from back.

-- 1) ----------------------------
class Solution { 
public:
  
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(!head )return head;
        if(!head-> next and n == 1)return NULL;
        ListNode* curr = head;
        int cnt = 0;
        while(curr != NULL){
            curr = curr -> next;
            cnt++;
        }
 
        int x = cnt - n + 1;
        cnt = 0;
        curr = head;
        ListNode* prev = head;
        while(cnt != x -1){
            cnt++;
            prev = curr;
            curr = prev->next;
        }
        if(cnt == 0){
            return head->next;
            
        }
    

        if(curr-> next){
            prev->next = curr -> next;
        }else{
            prev->next = NULL; 
        }
        return head;
        
    }
};


--2)--------------------------------
class Solution {
public:
    ListNode* ReverseList(ListNode*&head){
        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* ahead = head;
        while(curr != NULL){
            ahead = curr -> next;
            curr-> next = prev ;
            prev = curr;
            curr = ahead;
        }
        return prev;
    }
    ListNode* removeNthFromEnd(ListNode* head, int n) {

        
        //reverse , remove nth node , reverse
        if(!head)return head;
        if(!head->next and n==1)return NULL;
        
        ListNode* reverse = ReverseList(head);

        int cnt = 0;
        ListNode* curr = reverse;
        ListNode* prev = NULL;
        while(cnt != n - 1 ){
            cnt++;
            prev = curr;
            curr = prev-> next;
            
        }
        if(cnt == 0){// special case ( when we have to remove the 1st element from end or last element from front)
            return ReverseList(reverse->next);
        }
        if(curr -> next){
            prev->next = curr -> next;
        }else{
            prev->next = NULL;
        }
        ListNode* reverseAgain = ReverseList(reverse);
        return reverseAgain;
       
    }
};

-----3)-----------------------------------------------------------
class Solution { 
public:
  
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(!head )return head; 
        auto fp = head;
        auto sp = head;
        
        for(int i=0 ;i<n ;i++){
            fp = fp -> next;
        }
        if(!fp){
            auto p = head -> next;
            delete(head);
            return p;
        }
        while(fp -> next){
            sp = sp -> next;
            fp = fp -> next;
        }
        auto del = sp -> next;    
        sp -> next = sp -> next -> next;
        delete(del);
        
        return head;
    
        
    }
};

