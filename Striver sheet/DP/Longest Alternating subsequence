https://www.geeksforgeeks.org/longest-alternating-subsequence/
https://leetcode.com/problems/wiggle-subsequence/


Practice  : https://practice.geeksforgeeks.org/problems/longest-alternating-subsequence5951/1/#

Vedio: https://www.youtube.com/watch?v=UogHvfQ3e18

Memoized  : https://www.techiedelight.com/longest-alternating-subsequence/


Tabluation : 

-----------------------------------------------------------------------------------
class Solution {
	public:
		int AlternatingaMaxLength(vector<int>&nums){
		    // Code here
		    int n= nums.size();
		    
		    vector<vector<int>> dp(n, vector<int>(2));
		    // dp[0,1,...i][0] -->> +ve peak
		    // dp[0,1,...i][1] -->> -ve peak
		    
		    // longest alternating subseq uptil i -> max(dp[i][0], dp[i][1])
		    
		    dp[0][0]= 1;
		    dp[0][1]= 1;
		    
		    for(int i=1; i<n; i++){
		        for(int j=i-1; j>=0; j--){
		            if(nums[j] > nums[i]){
		                // -ve peak value of a[i] => +ve peak value of a[j] + 1
		                dp[i][1] =max(dp[j][0] + 1, dp[i][1]); 
		            }else if(nums[j] < nums[i]){
		                // +ve peak value of a[i] => -ve peak value of a[j] + 1
		                dp[i][0] = max(dp[j][1] + 1, dp[i][0]);
		            }
		        }
		    }
		    
		    return max(dp[n-1][0], dp[n -1][1]);
		    
		    
		}

};


////// ----------------------- O(N) Approach -------------------------------

inc = Length of longest alternative subsequence so far with current value being greater than it’s previous value.
dec = Length of longest alternative subsequence so far with current value being smaller than it’s previous value.

The tricky part of this approach is to update these two values. 

“inc” should be increased, if and only if the last element in the alternative sequence was smaller than it’s previous element.
“dec” should be increased, if and only if the last element in the alternative sequence was greater than it’s previous element.


class Solution {
	public:
		int AlternatingaMaxLength(vector<int>&nums){
		    
		    int inc = 1;
		    int dec = 1;
		    
		    int n = nums.size();
		    for(int i=1; i<n; i++){
		        if(nums[i] > nums[i -1]){
		            inc = dec + 1;
		        }else if(nums[i] < nums[i - 1]){
		            dec = inc + 1;
		        }
		    }
		    
		    return max(inc, dec);
		    
		    
		}

};


    
