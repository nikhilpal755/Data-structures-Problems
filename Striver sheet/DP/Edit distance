https://leetcode.com/problems/edit-distance/

-------------------- Bottom up (2D) ---------------------

class Solution {
public:
    int minDistance(string word1, string word2) {
        int n = word1.size() ;
        int m = word2.size();
        
        vector<vector<int>> dp(n + 1,vector<int>(m + 1, 0));
        
        // first col
        for(int i=0 ;i<=n ;i++){
            dp[i][0] = i;
        }
        // first row
        for(int i=0 ;i<=m ;i++){
            dp[0][i] = i;
        }
        
        for(int i=1;i<=n ;i++){
            for(int j=1;j<=m ;j++){
                // ith index in dp = (i-1)th index in string
                if(word1[i-1] == word2[j-1]){// characters are same 
                    dp[i][j] = dp[i-1][j-1];
                }else{
                    dp[i][j] = min(dp[i][j-1], min(dp[i-1][j-1] , dp[i-1][j])) + 1;
                }
            }
        }
        
        return dp[n][m];
        
    }
    
};




------------------- 1D space -----------------------------

---- Using modulo -----------
class Solution {
public:
    int minDistance(string word1, string word2) {
        int m = word1.size();
        int n = word2.size() ;
        
        vector<vector<int>> dp(2,vector<int>(m + 1, 0));
        
        // first row
        for(int i=0 ;i<=m ;i++){
            dp[0][i] = i;
        }
        
        for(int i=1;i<=n ;i++){
            for(int j=0 ;j<=m ;j++){
                if( j==0)dp[i%2][j] = i;// first column
                
                else if(word2[i-1] == word1[j-1]){
                    dp[i%2][j] = dp[(i-1)%2][j-1];
                }else{
                    dp[i%2][j] = min(dp[(i-1)%2][j] , min(dp[i%2][j-1] , dp[(i-1)%2][j-1]))+1;
                }
            }
            
        }
     
        return dp[n%2][m];
        
    }
};



---------- Using 2 vectors -------------


class Solution {
public:
    int minDistance(string word1, string word2) {
        int n = word1.size();
        int m = word2.size() ;
        
        vector<int> pre(m + 1), cur(m + 1);
        
        // first row
        for(int i=0 ;i<=m ;i++){
            pre[i] = i;
        }
        
        for(int i=1;i<=n ;i++){
            cur[0] = i;// first col filling
            for(int j=1 ;j<=m ;j++){
              
                
                if(word1[i-1] == word2[j-1]){
                    cur[j] = pre[j-1];
                }
                else{
                    cur[j] = min({pre[j-1], pre[j], cur[j-1]}) + 1;
                }
                
            }
            
            fill(pre.begin(), pre.end(),0);
            swap( pre, cur);
            
        }
     
        return pre[m];
        
    }
};
