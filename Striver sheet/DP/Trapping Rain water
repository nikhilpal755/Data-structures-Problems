https://leetcode.com/problems/trapping-rain-water/


Best Edutorial : https://leetcode.com/problems/trapping-rain-water/discuss/1374608/C%2B%2BJavaPython-MaxLeft-MaxRight-so-far-with-Picture-O(1)-space-Clean-and-Concise
Also prefer leetcode edutorial 

---------------- DP ---------------------
class Solution {
public:
    int trap(vector<int>& height) {
        
     
        // min( left_max , right_max ) - hieght[i] 
        
        int n = height.size();
        int ans = 0;
        
        vector<int> left_max(n) , right_max(n);
        left_max[0] = 0;
        right_max[n-1] = 0;
        
        for(int i=1;i<n; i++){
            left_max[i] = max(height[i-1],left_max[i-1]);
            
        }
   
        
        for(int i=n-2; i>=0; i--){
            right_max[i] = max(height[i+1],right_max[i+1]);
        }
        
        for(int i=0;i<n;i++){
            if(left_max[i] < height[i] or right_max[i] < height[i])continue;
            ans += min(left_max[i], right_max[i]) - height[i];
        }
       
        return ans;
        
    }
};



-------------------- Two Pointers --------------------


class Solution {
public:
    int trap(vector<int>& height) {
        
  
        int n = height.size();
        
        int l = 0 , r = n-1;
        
        int left_max = 0, right_max = 0;
        int water = 0;
        while(l < r){
            if(height[l] < height[r]){// water trapped is dependent of left_max
                if(height[l] >= left_max) left_max = height[l];// updating the left_max
                else water += left_max - height[l];
                l++;
            }else{
                if(height[r] >= right_max ) right_max = height[r];
                else water += right_max - height[r];
                r--;
            }
        }
        
        return water;
       
    }
};

