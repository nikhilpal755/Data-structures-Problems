https://leetcode.com/problems/jump-game-ii/


Edutorial : https://leetcode.com/problems/jump-game-ii/discuss/1192401/Easy-Solutions-w-Explanation-or-Optimizations-from-Brute-Force-to-DP-to-Greedy-BFS
---------- Memoization ----------------


class Solution {
public:
    
   int helper(vector<int>&nums, int idx,vector<int>&dp){
      
       if(idx >= nums.size() - 1) return 0;
       if(dp[idx] != -1)return dp[idx];
       
       
       int minJumps = 10001;// max jump we can do + 1 --> limit size of array - 10^4
       for(int i=1; i<=nums[idx]; i++){
           minJumps = min(minJumps,1 + helper(nums, idx + i , dp));
       }
       
       dp[idx] = minJumps;
       return dp[idx];
       
    }
    int jump(vector<int>& nums) {
        
        int n = nums.size(); 
        vector<int>dp(n, -1);
        
        return helper(nums, 0, dp);
    }
};


------------ DP -------------------
---- Filling from front -----
class Solution {
public:
    int jump(vector<int>& nums) {
        
        int n = nums.size();
        vector<int> dp(n , INT_MAX);
        dp[0] = 0;
        
       for(int i=0;i<n;i++){
            for(int j=1; j<=nums[i] and i + j < n; j++){
                dp[i + j] = min(dp[i + j], dp[i] + 1);
            }
        }
         
        return dp[n-1];
        
    }
};

------ Filling from back(preferable) ---------
class Solution {
public:

    int jump(vector<int>& nums) {
        
        int n = nums.size(); 
        vector<int>dp(n, 10001);
        
       
        // dp[i] =>  minimum number of moves required to reach the end from current index
        // dp[n - 1]= 0
        
        dp[n - 1] = 0;
        
        for(int i=n-2; i>=0 ;i--){
            for(int j=1; j<= nums[i] ; j++){
                if(i + j <= n-1) dp[i] = min(dp[i], dp[i + j] + 1);
            }
        }
        
        return dp[0];
        
        
    }
};

------------ Greedy -------------------

https://leetcode.com/problems/jump-game-ii/discuss/18028/O(n)-BFS-solution


class Solution {
public:
    int jump(vector<int>& nums) {
        
        int jumpIdx = 0;// start point
        int maxJumpSoFar = 0;
        int jumps = 0;
        
        for(int i=0;i<nums.size() - 1;i++){
            maxJumpSoFar= max(maxJumpSoFar, i + nums[i]);
            if(i == jumpIdx){
                jumps++;
                jumpIdx = maxJumpSoFar;
            }
        }
        
        return jumps;
    }
};

