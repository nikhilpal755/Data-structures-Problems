https://leetcode.com/problems/number-of-longest-increasing-subsequence/




class Solution {
public:
    int findNumberOfLIS(vector<int>& nums) {
        
        vector<int> dp(nums.size() , 1);//dp[i] =length of longest increasing subseq which ends at index i
        
        vector<int> cnt(nums.size() , 1);//cnt[i] = count the number of increasing subseq which ends at index i
        int maxLen = 0;
        for(int i=0;i <nums.size() ;i++){
            for(int j=0; j< i ;  j++){
                if(nums[j] < nums[i] ){
                    if(dp[i] < dp[j] + 1){
                        dp[i] = dp[j] + 1;
                        cnt[i] = cnt[j];
                    }else if(dp[i] == dp[j] + 1){
                        cnt[i] += cnt[j];
                    }
                }
            }
            maxLen = max(maxLen, dp[i]);
        }
        
        // check the how many times lIS comes 
        int ans = 0;
        for(int i=0 ; i<nums.size();i++){
            if(maxLen == dp[i]){
                ans += cnt[i];
            }
        }
        
        
        return ans;
        
       
     
      
        
        
    }
};
