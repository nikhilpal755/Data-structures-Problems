https://leetcode.com/problems/check-if-there-is-a-valid-partition-for-the-array/



class Solution {
public:
    bool validPartition(vector<int>& nums) {
        
        // dp[i + 1] => valid partition uptil index i -> T/F
        
        int n = nums.size();
        vector<int> dp(n + 1, 0);
        
        dp[0] = 1;
        

        for(int i=1;i<n; i++){
            if(nums[i] == nums[i - 1])dp[i + 1] |= dp[i - 1];
            if(i >= 2 and nums[i] == nums[i - 1] and nums[i - 1] == nums[i - 2]){
                dp[i + 1] |= dp[i - 2] ;
            }
            if(i >= 2 and nums[i] == nums[i - 1] + 1 and nums[i - 1] == nums[i - 2] + 1){
                // cout << nums[i - 2] << " " << nums[i -1] << " " << nums[i] << endl;
                dp[i + 1] |= dp[i - 2];
            }
            cout << dp[i] << " ";
        }
        
        return dp[n];
        
    }
};
