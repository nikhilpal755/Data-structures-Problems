https://leetcode.com/problems/house-robber-ii/

-------------- Bottom UP--------------------

class Solution {
public:
    
    int houseRobber(vector<int> nums){
        int n = nums.size();
        vector<int> dp(n + 1);
        
        dp[0] = nums[0];
        dp[1] = max(nums[0], nums[1]);
        
        for(int i=2; i<n; i++){
            dp[i] = max(dp[i-2] + nums[i], dp[i-1]);
        }
        
        return dp[n-1];
        
    }
    int rob(vector<int>& nums) {
        
        int n = nums.size();
    
        // we rob the houses from 0 to n -2
        // we rob the houses from 1 to n-1
        // ans = max of both
        
        if(n == 1)return nums[0];
        if(n == 2)return max(nums[0], nums[1]);
        
        vector<int> op1(nums.begin() , nums.end() -1);
        vector<int> op2(nums.begin() + 1, nums.end());
        
        return max(houseRobber(op1) ,houseRobber(op2));
        
    }
};
