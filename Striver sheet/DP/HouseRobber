https://leetcode.com/problems/house-robber/


------------- Top Down -------------------

class Solution {
public:
    vector<int> memo;
    int helper(vector<int>&nums ,int i){
        if(i < 0 )return 0;
        if(memo[i] >= 0)return memo[i];
            
        memo[i] = max(helper(nums , i - 2) + nums[i], helper(nums, i-1) );
        return memo[i];
    }
    int rob(vector<int>& nums) {
        
        if(nums.size() == 0)return 0;
        memo.resize(nums.size() + 1, -1);
        int i = nums.size() - 1;
        return helper(nums , i);
        
        
    }
};


--------------- Bottom up -------------------


class Solution {
public:
   
    int rob(vector<int>& nums) {
        int n = nums.size();
        
        vector<int> dp(n);
        if(n == 1)return nums[0];
        dp[0] = nums[0];
        dp[1] = max(nums[0], nums[1]);
        for(int i=2; i< n;i++){
            dp[i] = max(dp[i-2] + nums[i], dp[i-1]);
        }
        return dp[n-1];
    
        
    }
};
