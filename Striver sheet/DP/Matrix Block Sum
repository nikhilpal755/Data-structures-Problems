https://leetcode.com/problems/matrix-block-sum/


Edutorial : https://leetcode.com/problems/matrix-block-sum/discuss/477041/Java-Prefix-sum-with-Picture-explain-Clean-code-O(m*n)
            https://leetcode.com/problems/matrix-block-sum/discuss/477036/JavaPython-3-PrefixRange-sum-w-analysis-similar-to-LC-30478


----------------------------(DP + prefix Sum)-------------------------------------------
class Solution {
public:
    vector<vector<int>> matrixBlockSum(vector<vector<int>>& mat, int k) {
        int n = mat.size();
        int m = mat[0].size();
        
        vector<vector<int>> sum(n + 1 , vector<int>(m + 1,0)); // creating prefix sum
        
        for(int i=1;i <=n; i++){
            for(int j=1; j<=m;j++){
                sum[i][j] = mat[i-1][j-1]+ sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1];
            }
        }
        
        
        
        vector<vector<int>> res(n, vector<int>(m));
        
        for(int row = 0; row<n ;row++){
            for(int col = 0 ;col < m ; col++){
                int r1 = max(0,row - k);
                int c1 = max(0,col - k);
                int r2 = min(n-1, row + k);
                int c2 = min(m-1, col + k);
                
                r1++; c1++;r2++;c2++;  // because sum[][] is 1 based index
                
                res[row][col] = sum[r2][c2] - sum[r2][c1 -1]- sum[r1 -1][c2]  + sum[r1 - 1][c1 - 1]; 
                
                
                
            }
        }
        
        return res;
    }
};
