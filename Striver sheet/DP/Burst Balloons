https://leetcode.com/problems/burst-balloons/

Best Edutorial : https://leetcode.com/problems/burst-balloons/discuss/892552/For-those-who-are-not-able-to-understand-any-solution-WITH-DIAGRAM


-->> Memoization

class Solution {
public:
    int memo[301][301];
    
    int burst(vector<int>&nums, int n  , int i , int j){
        
        if(i > j)return 0;
        
        if(i == j){// only one ballon
            
            int temp = nums[i];
            if(i + 1 < n){
                temp *= nums[i + 1];
            }
            if(i - 1 >= 0){
                temp *= nums[i - 1];
            }
            return temp;
        }
        
        if(memo[i][j] != -1)return memo[i][j];
        int mx=0; 
        for(int k=i; k<=j ; k++){
            // always add contribution of current ballon after bursting before and after ballon
            int temp = nums[k];
            
            if(i - 1 >= 0)temp*= nums[i-1];
            if(j + 1 < n)temp*= nums[j +1];
            
            temp += burst(nums, n , i , k - 1) + burst(nums, n , k + 1, j);
            mx = max(mx, temp);
            
        }
        
        
        return memo[i][j] = mx;
        
        
        
        
        
    }
    int maxCoins(vector<int>& nums) {
        
        // dp[i][j] -> max coins attained by bursting ballons b/w i and j
        
        int n = nums.size();
        memset(memo, -1, sizeof(memo));
        
        vector<int> arr;
        arr.push_back(1);
        
        for(int i=0;i<n; i++){
            arr.push_back(nums[i]);
        }
        
        arr.push_back(1);
        
       return  burst(arr, n + 2, 1 , arr.size() - 2);
        
        
        
    }
};
