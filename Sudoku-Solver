Question : https://leetcode.com/problems/sudoku-solver/

For Refrence : https://youtu.be/uyetDh-DyDg
-----------------------------------------------------------------------------------------------
class Solution {
    vector<vector<char>> res;
    bool Is_valid_option(vector<vector<char>>& board , int row , int col  , char option){
        // checking in col
        for(int i=0; i<board.size() ; i++){
            if(board[i][col] == option){
                return false;
            }
        }
        
        // checking in row
        for(int i= 0 ; i<board[0].size() ;i++){
            if(board[row][i] == option){
                return false;
            }
        }
        
        // checking in 3*3 grid
        int start_row = (row/3)*3;
        int start_col = (col/3)*3;
        
        for(int i=0 ; i< 3 ;i++){
            for(int j=0 ;j< 3 ;j++){
                if(board[start_row + i][start_col + j] == option){
                    return false;
                }
                
            }
        }
        
        return true;
        
    }
    void helper(vector<vector<char>>& board , int row , int col){
        
        if(row == board.size()){
            res = board;
            return;
        }
        
        int new_row = 0, new_col = 0;
        if(col != board[0].size()-1){
            new_row = row;
            new_col = col + 1;
        }else if(col == board[0].size() - 1){
            new_row = row + 1;
            new_col = 0;
        }
        
        if(board[row][col] != '.'){
            helper(board , new_row  , new_col);
        }else{
            // explore all options
            for(char option = '1' ; option <= '9' ; option++){
                if(Is_valid_option(board, row , col , option)){
                    board[row][col] = option;
                    helper(board, new_row , new_col);
                    board[row][col] = '.';
                }
            }
            
            
        }
        
    }
public:
    void solveSudoku(vector<vector<char>>& board) {
        
        helper(board , 0  , 0);// because we need to move to each cell , we need to have row and col
        // at each step . Therefore , we need a helper function
        
        for(int i=0 ;i<board.size() ;i++){
            for(int j=0 ; j<board[0].size() ; j++){
                board[i][j] = res[i][j];
            }
        }    
    }
};


----------------------------------------------------------------------------------------------------
